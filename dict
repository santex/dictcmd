#! /usr/bin/perl

use strict;
use warnings;
use Config;
use Getopt::Long;
use Dictcmd;
use if $Config{useithreads}, 'threads';

use feature "say";

sub main;
sub processing_args($);
sub online_mode($);
sub offline_mode;
sub pretty_printer(\@);
sub print_results(@);
sub sort_precise(\@);
sub output(@);
sub usage;

#
# Initialize the commandline argument processing
# by using the Getopt::Long module.
#
my ($de_en, $en_de, $interactive, $offline, $online, $help) = (0, 0, 0, 0, 0, 0);
GetOptions(
    'de|de2en' => \$de_en,
    'en|en2de' => \$en_de,
    'i|interactive' => \$interactive,
    'offline' => \$offline,
    'online' => \$online,
    'help' => \$help,
);

#
# if the necessary module for OnlineRequests are installed
# use it, else use everytime the offline resources.
# ATTENTION !!! UNDEF IN $online COULD RESULTS IN PROBLEMS BY TOGGLE MODE
#
eval 'use OnlineRequest';
if ( $@ ) {
    $offline = 1;
    $online = undef;
}

# DEPRECATED COMMENT!!!
# Global Variables:
# $term ist the raw word what we search for
# @result_list is the list were we push our results in
# $pattern ist the regular expression for the offline search
#
our $pattern = ""; 

&main;

sub main 
{
    my $term = $ARGV[0] || '';

    say qq/type :q or :quit to exit interactive mode\n/ if $interactive;

    while (1) {
        if ( $term ) {
            #$pattern = qr(^.*?$term.*?$);
            processing_args($term);
        }
        if ( !$term && !$interactive ) {
            &usage;
        }
        if ( $interactive ) {
            chomp($term = <STDIN>);
            last if $term =~ /^:q(:?uit)?$/;
            if ($term =~ s/^:c\s?(en|de|off|on)$/$1/) {
                parse_commands($term);
                chomp($term = <STDIN>);
            }
        }
        last unless $interactive
    }
}

sub parse_commands 
{
    my $cmd = shift;

    if ($cmd =~ /en/) {
        $de_en = 0;
        $en_de = 1;
    }
    elsif ($cmd =~ /de/) {
        $de_en = 1;
        $en_de = 0;
    }
    elsif ($cmd =~ /off/) {
        $offline = 1;
        $online = 0;
    }
    elsif ($cmd =~ /on/) {
        $online = 1;
        $offline = 0;
    }
    else {
        warn("unknown command: $cmd");
        return 0;
    }

    say qq/[DEBUG] de_en: $de_en, en_de: $en_de/;
    return 1;
}


#
# determine parameters in anonymous block
#
sub processing_args($)
{
    my $term = shift;
    say qq/[DEBUG] term: $term/;
    my @result_list = ();

# language decision 
    if ( $de_en ) {
        $pattern = qr(^\w+? : \w*?$term\w*?$);
    }
    elsif ( $en_de ) {
        $pattern = qr(^\w*?$term\w*? : \w+?$);
    }
    else { &usage; }

# Mode decision
    if ( $offline ) {
        say qq/[DEBUG] offline mode:/;
        @result_list = &offline_mode;
    }
    elsif ( $online ) {
        say qq/[DEBUG] online mode/;
        @result_list = online_mode($term);
    }
    else {
        say qq/[DEBUG] hybrid mode/;
        my @tmp_1 = ();
        my @tmp_2 = ();

        if ( $Config{useithreads} ) {
            handle_threads();
        }
        else {
            @tmp_1 = &offline_mode;
            @tmp_2 = online_mode($term);
            @result_list = (@tmp_1, @tmp_2);
        }
    }
    output(@result_list);

}

#
# Thread handling routine here we start two threads, one for the offline
# request and another for the online request. The master-thread will wait
# until one of them is joinable, then he takes the result of the thread and
# calls the routines for output. The he waits until the second thread is ready
# too.
#
sub handle_threads
{
  my ( $offline_thr ) = threads->create(\&offline_mode);
  my ( $online_thr ) = threads->create(\&online_mode);
    
  do {
      if ($offline_thr->is_joinable()) {
          my @offline_result = $offline_thr->join();
          output(@offline_result);
      }
      if ($online_thr->is_joinable()) {
          my @online_result = $online_thr->join();
          output(@online_result);
      }
  } while ( threads->list() );

}

#
# Calls the subroutines to getting a nice output
#
sub output(@)
{
  my @raw_list = @_;
  pretty_printer(@raw_list);
  @raw_list= sort_precise(@raw_list);
  print_results(@raw_list);
}

#
# Sorts the results by the shortest first.
#
sub sort_precise(\@) 
{
    my @list = @{ shift() };
    @list = sort { length($a) <=> length($b) } @list;
    return @list;
}

#
# This subroutine deletes some ugly features in the list.
#
sub pretty_printer(\@)
{
    my $su = sub 
    { 
        s/(?:\[.*?\])//g;
        s/(?:\-\s.*?\:??)//g;
        s/(?:\(.*?\))//g;
        s/\s{2,}/ /g;
        $_;
    };
    map { $su->($_) } @{shift()};
}

#
# Triggers the certain subroutines to make the online request
# Returns the list which will be returned by the module.
#
sub online_mode($)
{
    my $term = shift;
    my $ref_res = online_request($term);
    my @list = parse_online_result($ref_res);
    return @list;
}

#
# takes the handle of the offline resource at first
# triggers the search routines from Dictcmd.pm, getting 
# a list which contains the results.
# Returns the list which will be returned by the module.
#
sub offline_mode
{
    my @list = ();
    my $handle = &getting_offline_resource;
    say qq/[DEBUG] pattern: $pattern/;
    @list = search_word($pattern, $handle);
    return @list;
}

#
# Formatted output of the results, not perfect but readable
# without eyebleeding
#
sub print_results(@)
{
    my @list = @_;
    my ($german, $english) = 0;
    my $limit = ( @list <= 15 ) ? @list : 15 ;

    for ( my $n = 0; $n < $limit; $n++ ) {
        ($english, $german) = split( ' : ', $list[$n]);
        if ( (length($english) > 38 ) || (length($german) > 38 ) ) {
            # skip lines which are to long
            next;
        }
        printf("%38s\t%-38s\n", $english, $german);
    }
}

if ( $help ) { &usage; }

sub usage 
{
  my $helpstring = <<"ENDHELP";
dictcmd OPTION SEARCHITEM

-de2en
-de the given word is a german one and you want to search the english equivalent.
-en2de
-en the given word is a english one and you want to search the german equivalent.
-online use only online search 
-offline use only offline search in the en-de.ISO-8859-1.vok file

ENDHELP
    
    say $helpstring;
    exit;
}

1;
__END__

=pod

=head1 NAME

dictcmd - for easy  german <-> english translation from your commandline

=head1 DESCRIPTION

This program is for german - english and english - german translation direct
form your comandline. There are two eventual sources to get your translation.
The first one is an simple file in your directory, the second one is to make
an online request to a known dictonary service. You can choose which kind of
source you ask. Only online, only offline or both (default). If you ask both
and your perl version has ithreads enabled you get better performance by using 
multithreading.

=head1 SYNOPSIS

dictcmd <OPTION> <SEARCHITEM>

-de2en
-de the given word is a german one and you want to search the english equivalent.
-en2de
-en the given word is a english one and you want to search the german equivalent.
-online use only online search 
-offline use only offline search in the en-de.ISO-8859-1.vok file

=cut
